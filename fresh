#/bin/bash

function freshlog {
	echo "fresh log | $(date '+%Y-%m-%d %H:%M:%S') | $* "
}

## ANSI art :-)
function intro {
	echo " __                _"
	echo "/ _|              | |"
	echo "| |_ _ __ ___  ___| |___"
	echo "|  _| '__/ _ \/ __| '_  \ "
	echo "| | | | |  __/\__ \ | | |"
	echo "|_| |_|  \___||___/_| |_|"
	echo ""
}

intro

function exciting {
#	freshlog "# ------------------ #"
#	freshlog "# Pipelines Complete #"
#	freshlog "# ------------------ #"
	echo ""
	echo "               _ _   _             "
	echo "              (_) | (_)            "
	echo "  _____  _____ _| |_ _ _ __   ____ "
	echo " / _ \ \/ / __| | __| | '_ \ / _  |"
	echo "|  __/>  < (__| | |_| | | | | (_| |"
	echo " \___/_/\_\___|_|\__|_|_| |_|\__, |"
	echo "                              __/ |"
	echo "                             |___/ "
	echo ""
	exit 0
}

function usage {

echo " _   _ ___  __ _  __ _  ___  "
echo "| | | / __|/ _\` |/ _\` |/ _ \ "
echo "| |_| \__ \ (_| | (_| |  __/ "
echo " \__,_|___/\__,_|\__, |\___| "
echo "                  __/ |      "
echo "                 |___/ "

	cat << EOF

Bash scripting to automate FreeSurfer usage
Use at your own risk, no warranty is provided
Flags explained
	-s <Subject ID>
	-d <Directory where subject data is located> (if not specified assumes current directory)
	-f <NII file to work on> (multiple instances of this flag possible)
	-w <wave/time_series> (multiple instances of this flag possible)
	-l [Only the longitudinal pipelines are run, the recon-all -all are skipped]
	-r [Only the recon-all -all pipelines are run, the longitudinal are skipped]
	-n <number of processor cores to work with for parallel pipelines> (if not set defaults to slurm setting)
	-a <afni input file> (multiple instances of this flag possible)
	-u [Print this help message]
	-h [Print this help message]

EOF

exciting

}

function sane {
	freshlog "Doing - $*"
	if [ "$dryrunflag" == "YES" ]; then # dry run or not
		freshlog "Dry run called - not executing"
	else
		"$@"
	fi
	local status=$?
	if [ $status -ne 0 ]; then
		freshlog "**** ERROR WITH: $1" >&2
		freshlog "Exiting because of the previous error"
		exit 101
	fi
	#return $status
	freshlog "Done"
}

function env_setup {

	. /etc/profile.d/modules.sh
	module purge
	module load tcin apps fresh

	if [ "$1" = "stable" ]; then
			freshlog "Loading stable FreeSurfer module"
			module load freesurfer/6.0
	elif [ "$1" == "dev" ]; then
		freshlog "Loading development FreeSurfer module"
		module load freesurfer/6-dev-20180918
		export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$cores
	elif [ "$1" == "afni" ]; then
		freshlog "Loading AFNI module"
		module load afni/17.1.03
	fi

	freshlog "Loaded module(s) are:"
	module list

}

## Pre-Processing Functions ##

function pp1 { # stage 1 pre-processing, mri_convert & recon-all -i (T1 files only)
	local myfile="$1"
	local mysubject="$2"
	local mywave="$3"
	freshlog "Stage 1 pre-processing of $myfile"
	env_setup stable
	# mri_conver re-sampling steps
	local rsfilename="$(echo $myfile | sed -e 's/\(.nii.gz\)*$//g')""_RS.nii.gz" # file name with _RS inserted for re-sampled files
	if [ -e "$rsfilename" ]; then # re-sampled file already exists, no need for re-sampling
		freshlog "$rsfilename already exists, not re-sampling it"
	else
		sane mri_convert -cs 0.9 "$myfile" "$rsfilename"
	fi
	# recon-all -i
	if [ ! -d "$mysubject""_""$mywave" ]; then # check to make sure the resulting directory doesn't already exist, this step will have been done if it did
		sane recon-all -i "$myfile" -s "$mysubject""_""$mywave"
	fi
}

function pp2 { # stage 2 pre-processing, recon-all -all
	local myfile="$1"
	local mysubject="$2"
	local mywave="$3"
	local myfiletype="$4"
	freshlog "Stage 2 pre-processing of $myfile"
	# T1
	if [ "$myfiletype" == "T1" ]; then
		local myt2comparator=""
		if [ ! -e "$myt2comparator" ]; then # if there are T2 files for this sample the T1 pre-processing is redundant
			sane recon-all -all -3T -parallel -openmp "$cores" -s "$mysubject""_""$mywave" -hippocampal-subfields-T1
		else
			freshlog "T2 comparator $myt2comparator for $myfile exists, hence, T1 pre-processing is redundant"
		fi
	fi
	# T2
	if [ "$myfiletype" == "T2" ]; then
		if [ -d "$subject""_""$wave" ]; then # "$subject""_""$wave" exists, ergo -T1 -all, (a requirement), should have run
			t2imageloc="$mysubject""_""$mywave""_T2_GR_FP.nii.gz"
			sane recon-all -all -3T -cm -parallel -openmp "$cores" -T2 "$t2imageloc" -T2pial -s "$mysubject""_""$mywave" -hippocampal-subfields-T1T2 "$t2imageloc" T1andT2_based
		else
			freshlog "The required "$subject""_""$wave" directory for the T2 step doesn't exist"
		fi
	fi
}

#function preprocess {
#	#if [ -n "${afni_inputs[@]}" ]; then
#	if [ -n "${afni_inputs}" ]; then
#		freshlog "AFNI inputs detected"
#		afni_pre_processing
#	else
#		freshlog "send "$1" to be pre-processed"
#		env_setup stable
#		local inputfile="$1"
#		freshlog "input file = $inputfile"
#		local outputfile="$(echo $inputfile | sed -e 's/\(.nii.gz\)*$//g')""_RS.nii.gz"
#		freshlog "output file = $outputfile"
#		freshlog "(Naive) Check to see if "$inputfile" is a T2 file format, they don't need this step"
#		naiveT2check=$(echo "$inputfile" | grep "T2")
#		if [ -z "$naiveT2check" ]; then # file name does not contain T2 string
#			freshlog "Preprocessing $inputfile"
#			freshlog "Checking to see if $output file already exists first"
#			if [ ! -e "$outputfile" ]; then # ensure the output file doesn't already exist
#				freshlog "$output file doesn't appear to exist, running mri_convert on $inputfile"
#				sane mri_convert -cs 0.9 "$inputfile" "$outputfile"
#				freshlog "$inputfile mri converted to $outputfile"
#			else
#				freshlog "$outputfile appears to already exist, not running mri_convert step on it"
#			fi
#			freshlog "adding $outputfile to array of pre-processed files for future processing"
#			freshlog "contents of pre-processed files array BEFORE: ${pre_processed_files[@]}"
#			pre_processed_files=("${pre_processed_files[@]}" "$outputfile")
#			freshlog "contents of pre-processed files array AFTER: ${pre_processed_files[@]}"
#		else
#			freshlog ""$inputfile" appears to be a T2 file, they do not need the mri_convert step run on them"
#			freshlog "adding $inputfile to array of pre-processed files for future processing"
#			freshlog "contents of pre-processed files array BEFORE: ${pre_processed_files[@]}"
#			pre_processed_files=("${pre_processed_files[@]}" "$inputfile")
#			freshlog "contents of pre-processed files array AFTER: ${pre_processed_files[@]}"
#		fi
#	fi	
#}

#function mri_convert {
#	freshlog "Running mri_convert pre-processing on $1"
#	## this step is only needed if there are T1 images only. I think?
#	#if [ "$t2images" != "YES" ]; then
#		env_setup stable
#		#for file in "${files[@]}"
#		#do
#			#thisfile="$1"
#			#convertedoutputfile="$thisfile""_RS"
#				# _RS appended at end of resampled files is the convention here
#			#freshlog "Running mri_convert on $file and outputting as $convertedoutputfile"
#			sane mri_convert -cs 0.9 "$1" "$1""_RS"
#		#done
#		#fi
#	#fi
#}

function afni_pre_processing {

## AFNI sanity checks

	env_setup afni

	## FIXME - way to pass specific AFNI flags
	for afni_input in "${afni_inputs[@]}"
	do
		local afni_output="$afni_input""_RS"
		sane 3dresample -orient ras -dxyz 1.2 1.1 1.1 -prefix "$afni_output" -input "$afni_input"
	done

	# *3dresample* -*orient* ras *-dxyz* 1.2 1.1 1.1 *-prefix* <output_name> *-input* <input_name>
	# (those in bold are part of the command, those in normal are the
	# parameters people can change according to their data)

}

#function do_recon_all_preprocessing {
#	## this is a short step
#	freshlog "# -------------------------------------------------- #"
#	freshlog "Starting recon-all -i pre-processing steps"
#	freshlog "This will only run recon-all -i on a single File for,"
#	freshlog "a single Subject ID at a single Time Point at a time."
#
#		env_setup stable
#
#		index="0"
#		while [ "$index" -lt "$file_count" ]
#		do
#			## Iterate through one array, (pre_processed_files), to get its corresponding item in a second array (waves)
#			## Note: used to iterate through the files array but the substitiution needed to replace file names wasn't working
#			#thisfile=$(echo "${files[$index]}")
#			thisfile=$(echo "${pre_processed_files[$index]}")
#			thiswave=$(echo "${waves[$index]}")
#			freshlog "Iterating through index point: $index of the mri converted files array to get the file to work on: $thisfile & the wave to work on: $thiswave"
#			## sanity check
#			t2check=$(echo "$thisfile" | grep T2)
#			if [ -z "$t2check" ]; then # this step is only needed for T1 files, not T2, (20200605)
#				if [ ! -d "$subject""_""$thiswave" ]; then
#					freshlog "The output directory from the recon-all -i  ("$subject""_""$wave") does not appear to exist"
#					freshlog "This is naive as it assumes the mere existance of the directory proves all is well."
#					freshlog "To get its corresponding $index item in the waves array to get the wave to work on: $thiswave"
#					sane recon-all -i "$thisfile" -s "$subject""_""$thiswave"
#					((index++))
#				else
#					freshlog "The output directory from the recon-all -i does appears to exist: ""$subject""_""$wave"". Moving on without doing pre-processing step"
#					((index++))
#				fi
#			else
#				freshlog "$thisfile detected as being a T2 file - not running recon-all -i on it"
#				((index++))
#			fi
#		done
#
#		freshlog "Finished recon-all -i PREPEND ONLY steps for"
#		freshlog ""$subject""_""$wave""
#		freshlog "Work complete."
#		freshlog "# -------------------------------------- #"
#		freshlog ""
#
#	}

## reconall -all processing

#function do_recon_all {
#
#	freshlog "# --------------------------- #"
#	freshlog "Starting recon-all -all steps"
#
#	env_setup stable
#
#	for wave in "${waves[@]}"; do
#		# T1 files
#		if [ -d "$subject""_""$wave" ]; then 
#			freshlog ""$subject""_""$wave" directory exists - running T1 pipeline"
#			freshlog "The T1 files had to be p-re-processed for this directory to exist"
#			sane recon-all -all -3T -parallel -openmp "$cores" -s "$subject""_""$wave" -hippocampal-subfields-T1
#		else
#			freshlog ""$subject""_""$wave" directory from the -i step does not appear to exist"
#			freshlog "cannot run the corresponding recon-all -all T1 step - not doing so"	
#		fi
#		# T2 files
#		t2imageloc="$subject""_""$wave""_T2_GR_FP.nii.gz"
#		if [ -e "$t2imageloc" ]; then # T2 file exists, process accordingly
#			freshlog "T2 file, $t2imageloc, detected, process accordinlgy"
#			sane recon-all -all -3T -cm -parallel -openmp "$cores" -T2 "$t2imageloc" -T2pial -s "$subject""_""$wave" -hippocampal-subfields-T1T2 "$t2imageloc" T1andT2_based
#		fi
#	done
#}

function pp3 { # segment*.sh steps
	env_setup dev
	freshlog "Stage 3 Pre-processing steps"
	mysubject="$1"
	mywave="$2"
	sane segmentHA_T1.sh "$mysubject""_""$mywave"
	sane segmentBS.sh "$mysubject""_""$mywave"
	sane segmentThalamicNuclei.sh "$mysubject""_""$mywave"

	#for wave in "${waves[@]}"; do
	t2imageloc="$subject""_""$wave""_T2_GR_FP.nii.gz"
	if [ -e "$t2imageloc" ]; then # T2 images present, they need another step
		sane segmentHA_T2.sh "$subject""_""$wave" $directory/"$subject""_""$wave""_T2_GR_FP.nii.gz" T1andT2_based 1
	fi
	#done

	freshlog "recon-all steps completed"
	freshlog "# ----------------------- #"

}

function do_longitudianal {

	freshlog "# ------------------------ #"
	freshlog "Starting Longitudianal Pipeline"

	## sanity check to ensure multiple time points here
	if [ ${#waves[@]} -gt 1 ]; then
		freshlog "Detected there are ${#waves[@]} time points, which is  more than 1 time series or wave"
		freshlog "I.e. this is longitudianal data - Moving on to process it longitudianally"

		env_setup stable

		## recon-all -base has the following format
		## recon-all -base "$subject""base" -tp $subject_$timepoint1 -tp $subject_timepoint2 -tp $subject_timepoint3 -all
		## thus we need to build an array of the waves and pass them to it
		for wave in "${waves[@]}"
		do
			local timepointrefs=("${timepointrefs[@]}" "-tp" "$subject""_""$wave")
		done

		sane recon-all -base "$subject""base" "${timepointrefs[@]}" -all

		lastwave=$(echo "${waves[*]}" | sort -nr | awk '{print $NF}')
		freshlog "Determining the last time series to be $lastwave"
			## `--> thought this step only ran on last time point but it runs on all
			##			keeping the variable incase it comes in useful elsewhere

		for wave in "${waves[@]}"
		do
			sane recon-all -long "$subject""_""$wave" "$subject""base" -all
		done

		env_setup dev

		freshlog "Starting segmentHA_T1_long.sh step"
		sane segmentHA_T1_long.sh "$subject"base

		freshlog "Starting segmentBS.sh steps"

		for wave in "${waves[@]}"
		do
			sane segmentBS.sh "$subject""_""$wave".long."$subject"base
		done

		freshlog "Finished segmentBS.sh steps"

		freshlog "Starting segmentThalamicNuclei.sh steps"

		for wave in "${waves[@]}"
		do
			sane segmentThalamicNuclei.sh "$subject""_""$wave".long."$subject"base
		done

		freshlog "Finished longitudianal steps"
		freshlog "# ------------------------ #"

	else
                freshlog "Detected there are ${#waves[@]} time points, which is less than 2 time series or waves"
                freshlog "I.e. this does not appear to be longitudianal data - Not running the longitudianal pipelines"
		freshlog ""
	fi
}

# get the flags
while getopts "s:d:f:w:c:a:n:rlux" OPTION
do
	case $OPTION in
		s)
			subject=$OPTARG
			;;
		d)
			directory=$OPTARG
			;;
		f)
			files=(${files[@]} "$OPTARG")
			;;
		w)
			waves=(${waves[@]} "$OPTARG")
			;;
		r)
			recononly="YES"
			;;
		l)
			longonly="YES"
			;;
		x)
			dryrunflag="YES"
			;;
#		t)
#			t2images="YES"
#			;;
#		e)
#			resampled="NO"
#			;;
#		c)
#			convertedoutputfile=$OPTARG
#			;;
		a)
			afni_inputs=(${afni_inputs[@]} "$OPTARG")
			;;
#		z)
#			afni_outputs=(${afni_outputs[@]} "$OPTARG")
#			;;
#		p)
#			recon_all_prefix="YES"
#			;;
		n)
			cores=$OPTARG
			;;
		?)
			usage
			exit
			;;
	esac
done

## Sanity Checks
#for file in "${files[@]}"
#do
#	if [ ! -f "$file" ]; then
#		freshlog "Can't find the file $file referenced with the -f flag"
#		usage
#		freshlog "Exiting without going furhter"
#		exit 90
#	else
#		freshlog "Will be working on file: $file"
#	fi
#done

#if [ -z "$subject" ]; then
#	freshlog "No Subject ID provided via the -s flag"
#	usage
#	freshlog "Exiting without going furhter"
#	exit 91
#else
#	freshlog "Subject ID = $subject"
#fi

#if [ ${#waves[@]} -eq 0 ]; then
#	freshlog "No wave / time series reference provided via the -w flags"
#	freshlog "Or no -w flags specified at all"
#	usage
#	freshlog "Exiting without going furhter"
#	exit 92
#else
#	freshlog "Wave(s) = "
#	echo "${waves[@]}"
#fi

## make sure the number of files corresponds to the same number of waves
#file_count=${#files[@]}
#wave_count=${#waves[@]}
#if [ "$file_count" != "$wave_count" ]; then
#	freshlog "File count ("$file_count") is NOT equal to the Wave Count ("$wave_count")"
#	freshlog "The number of files needs to correspond to the number of waves or time series"
#	freshlog "Exiting without running any pipelines."
#	exit 88
#fi

for afni_file in "${afni_inputs[@]}"
do
        if [ ! -f "$afni_file" ]; then
                freshlog "Can't find the AFNI file $afni_file referenced with the -a flag"
                usage
                freshlog "Exiting without going further"
                exit 90
        else
                freshlog "Will be using AFNI Pre-Processing on file: $afni_file"
        fi
done


if [ -z "$directory" ]; then
	directory=$(pwd)
fi
export SUBJECTS_DIR=$directory
freshlog "Setting directory to be $directory"
freshlog "Setting SUBJECTS_DIR = $directory"

## if not specified assuming the number of cores
## is being dictated by a slurm allocation
if [ -z "$cores" ]; then
	cores="$SLURM_TASKS_PER_NODE"
fi
freshlog "Number of Cores to work with = $cores"

for file in "${files[@]}"
do
	if [ ! -f "$file" ]; then
		freshlog "Can't find the file $file referenced with the -f flag"
		usage
		freshlog "Exiting without going furhter"
		exit 90
	fi
done

## =================== ##
## Worflow starts here ##
## =================== ##

freshlog "# Pipelines Starting #"

freshlog "Preprocessing steps"
freshlog "==================="

for file in "${files[@]}"
do
	# this is very brittle
	subject="${file:0:5}"
	wave="${file:6:2}"
	# pop these waves into a waves array for later use.
	waves=("${waves[@]}" "$wave")
	filetype="${file:9:2}"
	freshlog "Paramaters: file = $file subject = $subject wave = $wave filetype = $filetype"
	if [ "$longonly" == "YES" ]; then # longonly var set, ergo don't do this step
		freshlog "** skipping reconall -all steps **"
		freshlog "fresh has been run with the -l flag, which means run the Longitudinal processing only"
	else
		freshlog "Will be working on file: $file"
		if [ "$filetype" == "T1" ]; then
			freshlog "Preprocessing $file"
			pp1 "$file" "$subject" "$wave"
			pp2 "$file" "$subject" "$wave" "T1"
		else
			freshlog "$file determined to be a T2 file which does not need stage 1 pre-processing, just stage 2"
			pp2 "$file" "$subject" "$wave" "T2"
		fi
	fi
	if [ "$recononly" == "YES" ]; then 
		freshlog "-r flag passed - stop now as should only do reconall -all steps, not the longitidinal"
		exciting
	fi
done

freshlog "stage 3 pre-processing, segment*.sh"

freshlog "removing duplicates from waves array"
freshlog "contents of waves array BEFORE removal of duplicates:"
echo ${waves[@]}
uniqwaves=($(echo "${waves[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
freshlog "contents of waves array AFTER removal of duplicates:"
echo ${uniqwaves[@]}

for wave in "${uniqwaves[@]}"; do
	pp3 "$subject" "$wave"
	# this defaults the subject id to whatever it was last set at, may be an issue!?
done

freshlog "Preprocessing steps finished"
freshlog "============================"
freshlog ""

#freshlog "reconall -all processing"
#freshlog "========================"
#freshlog ""
#
#if [ "$longonly" == "YES" ]; then # longonly var set, ergo don't do this step
#	freshlog "** skipping reconall -all steps **"
#	freshlog "fresh has been run with the -l flag, which means run the Longitudinal processing only"
#else
#	freshlog "2 reconall pre-processing"
#	do_recon_all_preprocessing
#	do_recon_all
#	if [ "$recononly" == "YES" ]; then 
#		freshlog "-r flag passed - stop now as should only do reconall -all steps, not the longitidinal"
#		exciting
#	fi
#fi

freshlog "Longitudinal processing"

do_longitudianal


exciting

exit 0
