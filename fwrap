#!/bin/bash

description() {
	echo "fwrap - Simple, interactive, wrapper for running fresh on the contents of a directory"
}

usage() {
	description
	echo "flags:"
	echo "	-d <directory> directory to work in, defaults to current working directory if not specified"
	echo "	-f <file signifier> file signifier, defaults to GR_FP.nii.gz if not set"
	echo "	-s <Subject ID>, ignores if not explicitly stated"
	echo "	-v verbose mode"
	echo "	-r pre-processing steps only, i.e. no longitudinal steps"
	echo "	-l longitudinal steps only, i.e. no pre-processing steps"
}

say() {
	if [ "$verbose" == "YES" ]; then
		echo "$*"
	fi
}

# get the flags
while getopts "d:f:s:vh" OPTION
do
	case $OPTION in
		d)
			dir=$OPTARG
			;;
		f)
			file_signifier=$OPTARG
			;;
		s)
			subject_id=$OPTARG
			;;
		v)
			verbose="YES"
			;;
		h)
			usage
			exit
			;;
	esac
done

if [ -z "$dir" ]; then
	dir=$(pwd)
fi
echo "Directory to work on = "$dir""

if [ -z "$file_signifier"]; then
	file_signifier="GR_FP.nii.gz"
fi
echo "The file signifier, (pattern used to signify a file is one fresh should be run on), = $file_signifier"
echo "(If set) Subject ID: $subject_id (if blank none specified)"

# get the files to work on
declare -a allfiles
declare -a targetfiles
allfiles=($dir/*)
for file in "${allfiles[@]}"; do
	target_file_type_check=$(echo $file | grep "$file_signifier")
	target_file_subjectid_check=$(echo $file | grep "$subject_id")
	say "targetfiles contents BEFORE ${targetfiles[@]}"
	if [ -n "$target_file_type_check" ]; then
		say "file $file matches target file type"
		filename=$(basename $file)
		if [ -z "$subject_id" ]; then
			say "no explicit subject id specified"
			say "filename = $filename - adding to targetfiles array"
			targetfiles=("${targetfiles[@]}" "-f $filename" )
		elif [ -n "$target_file_subjectid_check" ]; then
			say "file: $file matches the specificed subject id: $subject_id"
			say "filename = $filename - adding to targetfiles array"
			targetfiles=("${targetfiles[@]}" "-f $filename" )
		else
			say "file: $file does not match the specificed subject id: $subject_id -- NOT adding to targetfiles array"
		fi
	fi
	say "targetfiles contents AFTER ${targetfiles[@]}"
done

freshline_all="fresh ${targetfiles[@]}" # everything
freshline_ppo="fresh -r ${targetfiles[@]}" # pre-processing only
freshline_lon="fresh -l ${targetfiles[@]}" # longitudinal only

if [ ${#targetfiles[@]} -eq 0 ]; then
	echo "targetfiles array doesn't appear to have any elements in it"
	echo "that suggests there are no files to be processed, exiting"
	exit 0
fi

echo ""
echo "Choose one of the following"
echo "1 - do all steps, i.e. recon-all -all pre-processing & longitudinal steps"
echo "2 - do only the recon-all -all pre-processing steps"
echo "3 - do only the longitudinal steps"
read -p "Choose (1, 2 or 3)? "
if [ $REPLY == "1" ]; then
	echo "Doing all steps"
	freshline="$freshline_all"
elif [ $REPLY == "2" ]; then
	freshline="$freshline_ppo"
elif [ $REPLY == "3" ]; then
	freshline="$freshline_lon"
else
	echo "Invalid choice, exiting without doing anything"
	exit 2
fi

say "freshline = "$freshline""

sbatch_file="$dir/sbatch.sh"
cat <<EOF > $sbatch_file
#!/bin/sh
#SBATCH -N 1
#SBATCH -p compute
#SBATCH -J "fresh"
#SBATCH -t 4-00:00:00

cd $dir

module load apps fresh

$freshline
EOF

echo "Here is the generated submission file:"
echo ""
cat $sbatch_file
echo ""

read -p "Is that correct? (y/n)? "
if [ $REPLY == "y" ]; then
	echo "submitting $sbatch_file to the queue"
	sbatch $sbatch_file
else
	echo "y not entered, exiting"
	echo "deleting $sbatch_file"
	rm $sbatch_file
	echo "Exiting without doing anything else"
	exit 0
fi


exit 0
